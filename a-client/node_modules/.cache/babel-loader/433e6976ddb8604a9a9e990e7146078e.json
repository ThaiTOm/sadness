{"ast":null,"code":"if (window.indexedDB) {\n  const customerData = [{\n    ssn: \"444-44-4444\",\n    name: \"Bill\",\n    age: 35,\n    email: \"bill@company.com\"\n  }, {\n    ssn: \"555-55-5555\",\n    name: \"Donna\",\n    age: 32,\n    email: \"donna@home.org\"\n  }];\n  var db;\n  var request = window.indexedDB.open(\"MyTestDatabase\", 3);\n\n  request.onerror = function (event) {\n    console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n  };\n\n  request.onsuccess = function (event) {\n    db = event.target.result;\n  };\n\n  request.onupgradeneeded = function (event) {\n    var db = event.target.result; // Create an objectStore to hold information about our customers. We're\n    // going to use \"ssn\" as our key path because it's guaranteed to be\n    // unique - or at least that's what I was told during the kickoff meeting.\n\n    var store = db.createObjectStore('Files', {\n      keyPath: \"files\"\n    });\n    var transaction = event.target.transaction;\n\n    transaction.oncomplete = function (event) {\n      var transaction = db.transaction([\"customers\"], \"readwrite\");\n      var objectStore = db.objectStore([\"customers\"]);\n      customerData.forEach(function (customer) {\n        var request = objectStore.add(customer);\n\n        request.onsuccess = function (event) {// event.target.result === customer.ssn;\n        };\n      });\n    };\n  };\n}","map":{"version":3,"sources":["/home/dthai/sadness/a-client/src/helpers/indexeddb.js"],"names":["window","indexedDB","customerData","ssn","name","age","email","db","request","open","onerror","event","console","log","onsuccess","target","result","onupgradeneeded","store","createObjectStore","keyPath","transaction","oncomplete","objectStore","forEach","customer","add"],"mappings":"AAAA,IAAIA,MAAM,CAACC,SAAX,EAAsB;AAClB,QAAMC,YAAY,GAAG,CACjB;AAAEC,IAAAA,GAAG,EAAE,aAAP;AAAsBC,IAAAA,IAAI,EAAE,MAA5B;AAAoCC,IAAAA,GAAG,EAAE,EAAzC;AAA6CC,IAAAA,KAAK,EAAE;AAApD,GADiB,EAEjB;AAAEH,IAAAA,GAAG,EAAE,aAAP;AAAsBC,IAAAA,IAAI,EAAE,OAA5B;AAAqCC,IAAAA,GAAG,EAAE,EAA1C;AAA8CC,IAAAA,KAAK,EAAE;AAArD,GAFiB,CAArB;AAIA,MAAIC,EAAJ;AACA,MAAIC,OAAO,GAAGR,MAAM,CAACC,SAAP,CAAiBQ,IAAjB,CAAsB,gBAAtB,EAAwC,CAAxC,CAAd;;AACAD,EAAAA,OAAO,CAACE,OAAR,GAAkB,UAAUC,KAAV,EAAiB;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACH,GAFD;;AAGAL,EAAAA,OAAO,CAACM,SAAR,GAAoB,UAAUH,KAAV,EAAiB;AACjCJ,IAAAA,EAAE,GAAGI,KAAK,CAACI,MAAN,CAAaC,MAAlB;AACH,GAFD;;AAGAR,EAAAA,OAAO,CAACS,eAAR,GAA0B,UAAUN,KAAV,EAAiB;AACvC,QAAIJ,EAAE,GAAGI,KAAK,CAACI,MAAN,CAAaC,MAAtB,CADuC,CAGvC;AACA;AACA;;AACA,QAAIE,KAAK,GAAGX,EAAE,CAACY,iBAAH,CAAqB,OAArB,EAA8B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAA9B,CAAZ;AACA,QAAIC,WAAW,GAAGV,KAAK,CAACI,MAAN,CAAaM,WAA/B;;AACAA,IAAAA,WAAW,CAACC,UAAZ,GACI,UAAUX,KAAV,EAAiB;AACb,UAAIU,WAAW,GAAGd,EAAE,CAACc,WAAH,CAAe,CAAC,WAAD,CAAf,EAA8B,WAA9B,CAAlB;AACA,UAAIE,WAAW,GAAGhB,EAAE,CAACgB,WAAH,CAAe,CAAC,WAAD,CAAf,CAAlB;AACArB,MAAAA,YAAY,CAACsB,OAAb,CAAqB,UAAUC,QAAV,EAAoB;AACrC,YAAIjB,OAAO,GAAGe,WAAW,CAACG,GAAZ,CAAgBD,QAAhB,CAAd;;AACAjB,QAAAA,OAAO,CAACM,SAAR,GAAoB,UAAUH,KAAV,EAAiB,CACjC;AACH,SAFD;AAGH,OALD;AAMH,KAVL;AAYH,GApBD;AAqBH","sourcesContent":["if (window.indexedDB) {\n    const customerData = [\n        { ssn: \"444-44-4444\", name: \"Bill\", age: 35, email: \"bill@company.com\" },\n        { ssn: \"555-55-5555\", name: \"Donna\", age: 32, email: \"donna@home.org\" }\n    ];\n    var db\n    var request = window.indexedDB.open(\"MyTestDatabase\", 3);\n    request.onerror = function (event) {\n        console.log(\"Why didn't you allow my web app to use IndexedDB?!\");\n    };\n    request.onsuccess = function (event) {\n        db = event.target.result;\n    };\n    request.onupgradeneeded = function (event) {\n        var db = event.target.result;\n\n        // Create an objectStore to hold information about our customers. We're\n        // going to use \"ssn\" as our key path because it's guaranteed to be\n        // unique - or at least that's what I was told during the kickoff meeting.\n        var store = db.createObjectStore('Files', { keyPath: \"files\" });\n        var transaction = event.target.transaction;\n        transaction.oncomplete =\n            function (event) {\n                var transaction = db.transaction([\"customers\"], \"readwrite\");\n                var objectStore = db.objectStore([\"customers\"]);\n                customerData.forEach(function (customer) {\n                    var request = objectStore.add(customer);\n                    request.onsuccess = function (event) {\n                        // event.target.result === customer.ssn;\n                    };\n                });\n            }\n\n    };\n}"]},"metadata":{},"sourceType":"module"}