{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport socketApp from '../../../socket';\nimport classNames from \"classnames\"; // This function is use for render list of contact\n\nvar socket = socketApp.getSocket();\n\nfunction ContactContain({\n  onClick,\n  message,\n  users,\n  idRoom,\n  target\n}) {\n  _s();\n\n  const [read, setRead] = useState(false);\n  const [active, setActive] = useState(false);\n  const [value, setValue] = useState(\"\"); // lu last user, clu contain last user and message\n\n  let lu;\n  const id = getCookie().token; //this message is last message when not online\n\n  let sliceMess = (a, user) => {\n    if (a.length > 0) {\n      let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a.split(\",\")[0];\n      setValue(user + mess);\n    } else {\n      setValue(user + \"đã gửi hình ảnh\");\n    }\n  };\n\n  useEffect(() => {\n    //message contain when another not sending and that is the last time when message send\n    socket.emit(\"joinChatBack\", {\n      idRoom\n    });\n    let a = decryptWithAES(message[0]);\n    if (message[1] === id) sliceMess(a, \"Bạn: \");else {\n      sliceMess(a, \"Đăng ấy: \"); // arr[2] contain true or false read\n\n      if (message[2] === \"false\") {\n        setRead(true);\n      }\n    }\n    socket.on(\"message\", msgs => {\n      if (msgs.idRoom === idRoom) {\n        lu = msgs.user;\n        let a = msgs.text ? decryptWithAES(msgs.text) : \"\";\n        if (lu === id) sliceMess(a, \"Bạn: \");else {\n          sliceMess(a, \"Đằng ấy: \"); // arr[2] contain true or false read\n\n          if (message[2] === \"false\") {\n            setRead(true);\n          }\n        }\n      }\n    });\n  }, [socket]);\n  useEffect(() => {\n    if (target === idRoom) {\n      setActive(true);\n      setRead(false);\n      socket.emit(\"seenMessage\", {\n        id: idRoom,\n        users\n      });\n    } else {\n      setActive(false);\n    }\n  }, [target]); //if last people send is who then assign that\n\n  var classN = classNames({\n    \"contact_container\": true,\n    \"active_contact\": active,\n    \"not_read_contact\": read\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classN,\n    onClick: () => onClick(idRoom, users, id),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact_contain_text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"avatar\",\n        src: \"./demo.jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContactContain, \"TG+K5KKQqBA3ScyAwVklTTBECNk=\");\n\n_c = ContactContain;\nexport default ContactContain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactContain\");","map":{"version":3,"sources":["/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js"],"names":["React","useEffect","useState","decryptWithAES","getCookie","socketApp","classNames","socket","getSocket","ContactContain","onClick","message","users","idRoom","target","read","setRead","active","setActive","value","setValue","lu","id","token","sliceMess","a","user","length","mess","slice","split","emit","on","msgs","text","classN"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport socketApp from '../../../socket';\nimport classNames from \"classnames\";\n\n// This function is use for render list of contact\nvar socket = socketApp.getSocket();\n\nfunction ContactContain({ onClick, message, users, idRoom, target }) {\n    const [read, setRead] = useState(false);\n    const [active, setActive] = useState(false);\n    const [value, setValue] = useState(\"\");\n    // lu last user, clu contain last user and message\n    let lu;\n\n    const id = getCookie().token;\n    //this message is last message when not online\n    let sliceMess = (a, user) => {\n        if (a.length > 0) {\n            let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a.split(\",\")[0]\n            setValue(user + mess)\n        }\n        else {\n            setValue(user + \"đã gửi hình ảnh\")\n        }\n    }\n\n    useEffect(() => {\n        //message contain when another not sending and that is the last time when message send\n        socket.emit(\"joinChatBack\", { idRoom })\n        let a = decryptWithAES(message[0])\n        if (message[1] === id) sliceMess(a, \"Bạn: \")\n        else {\n            sliceMess(a, \"Đăng ấy: \")\n            // arr[2] contain true or false read\n            if (message[2] === \"false\") {\n                setRead(true)\n            }\n        }\n        socket.on(\"message\", msgs => {\n            if (msgs.idRoom === idRoom) {\n                lu = msgs.user\n                let a = msgs.text ? decryptWithAES(msgs.text) : \"\"\n                if (lu === id) sliceMess(a, \"Bạn: \")\n                else {\n                    sliceMess(a, \"Đằng ấy: \")\n                    // arr[2] contain true or false read\n                    if (message[2] === \"false\") {\n                        setRead(true)\n                    }\n                }\n            }\n        })\n    }, [socket])\n\n    useEffect(() => {\n        if (target === idRoom) {\n            setActive(true)\n            setRead(false)\n            socket.emit(\"seenMessage\", { id: idRoom, users })\n        }\n        else {\n            setActive(false)\n        }\n    }, [target])\n    //if last people send is who then assign that\n    var classN = classNames({\n        \"contact_container\": true,\n        \"active_contact\": active,\n        \"not_read_contact\": read\n    })\n    return (\n        <div className={classN} onClick={() => onClick(idRoom, users, id)}>\n\n            <div className=\"contact_contain_text\">\n                <p>\n                    {value}\n                </p>\n                <img alt=\"avatar\" src=\"./demo.jpeg\"></img>\n            </div>\n        </div >\n    )\n}\n\nexport default ContactContain\n"]},"metadata":{},"sourceType":"module"}