{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nvar socket_io_parser_1 = require(\"socket.io-parser\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar on_1 = require(\"./on\");\n\nvar bind = require(\"component-bind\");\n\nvar debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.ids = 0;\n    _this.acks = {};\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.connected = false;\n    _this.disconnected = true;\n    _this.flags = {};\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n\n\n  _createClass(Socket, [{\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on_1.on(io, \"open\", bind(this, \"onopen\")), on_1.on(io, \"packet\", bind(this, \"onpacket\")), on_1.on(io, \"close\", bind(this, \"onclose\"))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n\n  }, {\n    key: \"connect\",\n\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: socket_io_parser_1.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        debug(\"emitting packet with ack id %d\", this.ids);\n        this.acks[this.ids] = args.pop();\n        packet.id = this.ids++;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (this.connected) {\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this2 = this;\n\n      debug(\"transport is open - connecting\");\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this2.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      this.disconnected = true;\n      delete this.id;\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case socket_io_parser_1.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case socket_io_parser_1.PacketType.EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case socket_io_parser_1.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case socket_io_parser_1.PacketType.CONNECT_ERROR:\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n\n          _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      debug(\"emitting event %j\", args);\n\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: socket_io_parser_1.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        debug(\"calling ack %s with %j\", packet.id, packet.data);\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {\n        debug(\"bad ack %s\", packet.id);\n      }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.connected = true;\n      this.disconnected = false;\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect\");\n\n      this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this3 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this3.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        return _this3.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        for (var i = 0; i < this.subs.length; i++) {\n          this.subs[i].destroy();\n        }\n\n        this.subs = null;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: socket_io_parser_1.PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n\n  }, {\n    key: \"onAny\",\n\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\n\nexports.Socket = Socket;","map":{"version":3,"sources":["/home/duythai/Developer/sadness/a-client/node_modules/socket.io-client/build/socket.js"],"names":["Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","Emitter","on_1","bind","debug","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","io","nsp","opts","ids","acks","receiveBuffer","sendBuffer","flags","connected","disconnected","auth","_autoConnect","open","subs","on","subEvents","_readyState","onopen","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","CONNECT","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","err","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","onclose","i","splice"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst Emitter = require(\"component-emitter\");\nconst on_1 = require(\"./on\");\nconst bind = require(\"component-bind\");\nconst debug = require(\"debug\")(\"socket.io-client:socket\");\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nclass Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        this.ids = 0;\n        this.acks = {};\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.connected = false;\n        this.disconnected = true;\n        this.flags = {};\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_1.on(io, \"open\", bind(this, \"onopen\")),\n            on_1.on(io, \"packet\", bind(this, \"onpacket\")),\n            on_1.on(io, \"close\", bind(this, \"onclose\")),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @param ev - event name\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            debug(\"emitting packet with ack id %d\", this.ids);\n            this.acks[this.ids] = args.pop();\n            packet.id = this.ids++;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        super.emit(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    super.emit(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                super.emit(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        super.emit(\"connect\");\n        this.emitBuffered();\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            for (let i = 0; i < this.subs.length; i++) {\n                this.subs[i].destroy();\n            }\n            this.subs = null;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"]},"metadata":{},"sourceType":"script"}