{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport classNames from \"classnames\";\nimport socketApp from '../../../socket';\nvar socket = socketApp.getSocket(); // This function is use for render list of contact\n\nfunction ContactContain({\n  onClick,\n  message,\n  users,\n  idRoom,\n  target,\n  nread\n}) {\n  _s();\n\n  // msg == new message send by real time, message == old message \n  const [read, setRead] = useState(false);\n  const [active, setActive] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [count, setCount] = useState(nread); // the user in the room is online or not\n\n  const [onl, setOnl] = useState(null); // lu last user, clu contain last user and message\n\n  const id = getCookie().token;\n  let lu; //this message is last message when not online\n\n  let sliceMess = (a, user) => {\n    if (a.length > 0) {\n      let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a;\n      setValue(user + mess);\n    } else {\n      setValue(user + \"đã gửi hình ảnh\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"message\", msgs => {\n      let fnc = () => {\n        // [message, idSend, seen or not]\n        lu = msgs.idRoom;\n        let a = msgs.data.data[0] ? decryptWithAES(msgs.data.data[0]) : \"\";\n        console.log(a, msgs);\n        if (lu === id) sliceMess(a, \"Bạn: \");else {\n          sliceMess(a, \"Their: \"); // arr[2] contain true or false read\n\n          if (msgs.seen === \"false\") {\n            setRead(true);\n          }\n        }\n      };\n\n      msgs.type === \"message\" && msgs.idRoom === idRoom && fnc();\n    });\n  }, [value, message]);\n  useEffect(() => {\n    //message contain when another not sending and that is the last time when message send\n    let fnc = () => {\n      socket.emit(\"joinChatBack\", {\n        idRoom\n      });\n      let a = decryptWithAES(message.data[0]);\n      if (message.id === id) sliceMess(a, \"Bạn: \");else {\n        sliceMess(a, \"Their: \"); // arr[2] contain true or false read\n\n        if (message.seen === \"false\") {\n          setRead(true);\n        }\n      }\n    };\n\n    message && fnc();\n  }, [value]);\n  useEffect(() => {\n    if (target === idRoom) {\n      setActive(true);\n      setRead(false);\n      setCount(0);\n      socket.emit(\"seenMessage\", {\n        id: idRoom,\n        userId: id\n      });\n    } else {\n      setActive(false);\n    }\n  }, [target, value]);\n  console.log(Object.keys(users));\n\n  for (let value in Object.keys(users)) {\n    // console.log(Object.keys(users))\n    if (value !== id && users.value === \"online\") {\n      setOnl(true);\n    }\n  } //if last people send is who then assign that\n\n\n  var classN = classNames({\n    \"contact_container\": true,\n    \"active_contact\": active,\n    \"not_read_contact\": read\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classN,\n    onClick: () => onClick(idRoom, users, id),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact_contain_text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"content\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), count > 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"count\",\n          children: [\" \", count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 34\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"avatar\",\n        src: \"./demo.jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), onl === true ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 33\n      }, this) : console.log()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContactContain, \"yZVNzM2z5QjEAGIpglEC/Ym6fgk=\");\n\n_c = ContactContain;\nexport default ContactContain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactContain\");","map":{"version":3,"sources":["/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js"],"names":["React","useEffect","useState","decryptWithAES","getCookie","classNames","socketApp","socket","getSocket","ContactContain","onClick","message","users","idRoom","target","nread","read","setRead","active","setActive","value","setValue","count","setCount","onl","setOnl","id","token","lu","sliceMess","a","user","length","mess","slice","on","msgs","fnc","data","console","log","seen","type","emit","userId","Object","keys","classN"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport classNames from \"classnames\";\nimport socketApp from '../../../socket';\nvar socket = socketApp.getSocket();\n\n// This function is use for render list of contact\n\nfunction ContactContain({ onClick, message, users, idRoom, target, nread }) {\n    // msg == new message send by real time, message == old message \n    const [read, setRead] = useState(false);\n    const [active, setActive] = useState(false);\n    const [value, setValue] = useState(\"\");\n    const [count, setCount] = useState(nread)\n    // the user in the room is online or not\n    const [onl, setOnl] = useState(null)\n    // lu last user, clu contain last user and message\n    const id = getCookie().token;\n    let lu;\n    //this message is last message when not online\n    let sliceMess = (a, user) => {\n        if (a.length > 0) {\n            let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a\n            setValue(user + mess)\n        }\n        else {\n            setValue(user + \"đã gửi hình ảnh\")\n        }\n    }\n    useEffect(() => {\n        socket.on(\"message\", msgs => {\n            let fnc = () => {\n                // [message, idSend, seen or not]\n                lu = msgs.idRoom\n                let a = msgs.data.data[0] ? decryptWithAES(msgs.data.data[0]) : \"\"\n                console.log(a, msgs)\n                if (lu === id) sliceMess(a, \"Bạn: \")\n                else {\n                    sliceMess(a, \"Their: \")\n                    // arr[2] contain true or false read\n                    if (msgs.seen === \"false\") {\n                        setRead(true)\n                    }\n                }\n            }\n            msgs.type === \"message\" && msgs.idRoom === idRoom && fnc()\n        })\n    }, [value, message])\n\n    useEffect(() => {\n        //message contain when another not sending and that is the last time when message send\n        let fnc = () => {\n            socket.emit(\"joinChatBack\", { idRoom })\n            let a = decryptWithAES(message.data[0])\n            if (message.id === id) sliceMess(a, \"Bạn: \")\n            else {\n                sliceMess(a, \"Their: \")\n                // arr[2] contain true or false read\n                if (message.seen === \"false\") {\n                    setRead(true)\n                }\n            }\n        }\n        message && fnc()\n    }, [value])\n\n    useEffect(() => {\n        if (target === idRoom) {\n            setActive(true)\n            setRead(false)\n            setCount(0)\n            socket.emit(\"seenMessage\", { id: idRoom, userId: id })\n        }\n        else {\n            setActive(false)\n        }\n    }, [target, value])\n    console.log(Object.keys(users))\n    for (let value in Object.keys(users)) {\n        // console.log(Object.keys(users))\n        if (value !== id && users.value === \"online\") {\n            setOnl(true)\n        }\n    }\n    //if last people send is who then assign that\n    var classN = classNames({\n        \"contact_container\": true,\n        \"active_contact\": active,\n        \"not_read_contact\": read\n    })\n    return (\n        <div className={classN} onClick={() => onClick(idRoom, users, id)}>\n            <div className=\"contact_contain_text\">\n                <p>\n                    <span className=\"content\">\n                        {value}\n                    </span>\n                    {count > 0 ? <span className=\"count\"> {count}</span> : \"\"}\n                </p>\n                <img alt=\"avatar\" src=\"./demo.jpeg\"></img>\n                {onl === true ? <span className=\"dot\"></span> : console.log()}\n            </div>\n        </div >\n    )\n}\n\nexport default ContactContain\n"]},"metadata":{},"sourceType":"module"}