{"ast":null,"code":"import cookie from \"js-cookie\";\nimport { replaceTelex } from \"../algorithm/algorithm\";\nimport CryptoJS from 'crypto-js'; //Set cookie\n\nexport const setCookie = (key, value) => {\n  if (window !== \"undefined\") {\n    cookie.set(key, value, {\n      expires: 7\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (window !== \"undefined\") {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n};\nexport const getCookie = key => {\n  if (window !== \"undefined\") {\n    return cookie.get(key);\n  }\n};\nexport const setLocalStorage = (key, value) => {\n  if (window !== \"undefined\") {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStorage = key => {\n  if (window !== \"undefined\") {\n    localStorage.removeItem(key);\n  }\n}; // Auth user after login\n\nexport const authenicate = (res, next) => {\n  let userName;\n\n  if (res.data.user.name) {\n    userName = replaceTelex(res.data.user.name);\n  } else {\n    userName = replaceTelex(res.data.user);\n  }\n\n  setCookie(\"token\", res.data.token);\n  setLocalStorage(\"user\", userName);\n}; // Sign out\n\nexport const signOut = next => {\n  removeCookie(\"token\");\n  removeLocalStorage(\"user\");\n};\nexport const isAuth = () => {\n  if (window !== \"undefined\") {\n    const cookieChecked = getCookie(\"token\");\n\n    if (cookieChecked) {\n      if (localStorage.getItem(\"user\")) {\n        return JSON.parse(localStorage.getItem(\"user\"));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const updateUser = (res, next) => {\n  if (window !== \"undefined\") {\n    let auth = JSON.parse(localStorage.getItem(\"user\"));\n    auth = res.data;\n    localStorage.setItem(\"user\", JSON.stringify(auth));\n  }\n\n  next();\n}; //  \n\nexport const encryptTo = text => {\n  const passphrase = '123nguyenduythaise1';\n  return CryptoJS.AES.encrypt(text, passphrase).toString();\n};\nexport const decryptWithAES = ciphertext => {\n  const passphrase = '123nguyenduythaise1';\n  const bytes = CryptoJS.AES.decrypt(ciphertext, passphrase);\n  let originalText; //if original text is defined that assign it\n\n  try {\n    originalText = bytes.toString(CryptoJS.enc.Utf8);\n  } catch (error) {\n    originalText = \"\";\n  }\n\n  return originalText;\n};","map":{"version":3,"sources":["/home/dthai/sadness/a-client/src/helpers/auth.js"],"names":["cookie","replaceTelex","CryptoJS","setCookie","key","value","window","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenicate","res","next","userName","data","user","name","token","signOut","isAuth","cookieChecked","getItem","parse","updateUser","auth","encryptTo","text","passphrase","AES","encrypt","toString","decryptWithAES","ciphertext","bytes","decrypt","originalText","enc","Utf8","error"],"mappings":"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","sourcesContent":["import cookie from \"js-cookie\";\nimport { replaceTelex } from \"../algorithm/algorithm\";\nimport CryptoJS from 'crypto-js';\n\n//Set cookie\nexport const setCookie = (key, value) => {\n    if (window !== \"undefined\") {\n        cookie.set(key, value, {\n            expires: 7\n        })\n    }\n}\nexport const removeCookie = key => {\n    if (window !== \"undefined\") {\n        cookie.remove(key, {\n            expires: 1\n        })\n    }\n}\nexport const getCookie = key => {\n    if (window !== \"undefined\") {\n        return cookie.get(key)\n    }\n}\nexport const setLocalStorage = (key, value) => {\n    if (window !== \"undefined\") {\n        localStorage.setItem(key, JSON.stringify(value))\n    }\n}\nexport const removeLocalStorage = key => {\n    if (window !== \"undefined\") {\n        localStorage.removeItem(key)\n    }\n}\n\n// Auth user after login\nexport const authenicate = (res, next) => {\n    let userName;\n    if (res.data.user.name) {\n        userName = replaceTelex(res.data.user.name)\n    } else {\n        userName = replaceTelex(res.data.user)\n    }\n    setCookie(\"token\", res.data.token);\n    setLocalStorage(\"user\", userName);\n}\n\n// Sign out\nexport const signOut = next => {\n    removeCookie(\"token\");\n    removeLocalStorage(\"user\");\n}\n\nexport const isAuth = () => {\n    if (window !== \"undefined\") {\n        const cookieChecked = getCookie(\"token\")\n        if (cookieChecked) {\n            if (localStorage.getItem(\"user\")) {\n                return JSON.parse(localStorage.getItem(\"user\"))\n            } else {\n                return false\n            }\n        }\n    }\n}\nexport const updateUser = (res, next) => {\n    if (window !== \"undefined\") {\n        let auth = JSON.parse(localStorage.getItem(\"user\"))\n        auth = res.data\n        localStorage.setItem(\"user\", JSON.stringify(auth))\n    }\n    next()\n}\n//  \nexport const encryptTo = text => {\n    const passphrase = '123nguyenduythaise1';\n    return CryptoJS.AES.encrypt(text, passphrase).toString();\n}\nexport const decryptWithAES = ciphertext => {\n    const passphrase = '123nguyenduythaise1';\n    const bytes = CryptoJS.AES.decrypt(ciphertext, passphrase);\n    let originalText\n    //if original text is defined that assign it\n    try {\n        originalText = bytes.toString(CryptoJS.enc.Utf8);\n    } catch (error) {\n        originalText = \"\"\n    }\n    return originalText;\n};"]},"metadata":{},"sourceType":"module"}