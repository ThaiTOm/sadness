{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport useLatest from 'use-latest';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\"Expected `handler` to be of type `function`, but received type `\" + typeof handler + \"`\");\n    }\n  }\n\n  var handlerRef = useLatest(handler);\n  useEffect(function () {\n    var handleBeforeunload = function handleBeforeunload(event) {\n      var returnValue;\n\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      } // Chrome requires `returnValue` to be set.\n\n\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n    return function () {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired\n  };\n}\n\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"sources":["../src/useBeforeunload.js","../src/Beforeunload.js"],"names":["useBeforeunload","process","handler","handlerRef","useLatest","useEffect","handleBeforeunload","returnValue","event","window","Beforeunload","children","onBeforeunload","PropTypes","isRequired"],"mappings":";;;;IAGMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,OAAA,EAAa;AACnC,MAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC,QAAI,OAAA,OAAA,KAAA,UAAA,IAAiCC,OAAO,IAA5C,IAAA,EAAsD;AACpD,YAAM,IAAA,SAAA,CAAA,qEACoE,OADpE,OAAA,GAAN,GAAM,CAAN;AAGD;AACF;;AAED,MAAMC,UAAU,GAAGC,SAAS,CAA5B,OAA4B,CAA5B;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAW;AACpC,UAAA,WAAA;;AACA,UAAIH,UAAU,CAAVA,OAAAA,IAAJ,IAAA,EAAgC;AAC9BI,QAAAA,WAAW,GAAGJ,UAAU,CAAVA,OAAAA,CAAdI,KAAcJ,CAAdI;AAHkC,OAAA,CAAA;;;AAOpC,UAAIC,KAAK,CAAT,gBAAA,EAA4B;AAC1BA,QAAAA,KAAK,CAALA,WAAAA,GAAAA,EAAAA;AACD;;AAED,UAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnCA,QAAAA,KAAK,CAALA,WAAAA,GAAAA,WAAAA;AACA,eAAA,WAAA;AACD;AAdH,KAAA;;AAiBAC,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,cAAAA,EAAAA,kBAAAA;AAEA,WAAO,YAAM;AACXA,MAAAA,MAAM,CAANA,mBAAAA,CAAAA,cAAAA,EAAAA,kBAAAA;AADF,KAAA;AApBO,GAAA,EAX0B,EAW1B,CAATJ,CAXmC,CAAA;AAmCpC,C;;ICnCKK,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAyC;AAAA,MAAA,aAAA,GAAA,IAAA,CAAtCC,QAAsC;AAAA,MAAtCA,QAAsC,GAAA,aAAA,KAAA,KAAA,CAAA,GAA3B,IAA2B,GAAA,aAAA;AAAA,MAArBC,cAAqB,GAAA,IAAA,CAArBA,cAAqB;AAC5DZ,EAAAA,eAAe,CAAfA,cAAe,CAAfA;AACA,SAAA,QAAA;AACD,C;;AAED,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCS,EAAAA,YAAY,CAAZA,SAAAA,GAAyB;AACvBC,IAAAA,QAAQ,EAAEE,SAAS,CADI,GAAA;AAEvBD,IAAAA,cAAc,EAAEC,SAAS,CAATA,IAAAA,CAAeC;AAFR,GAAzBJ;AAID","sourcesContent":["import { useEffect } from 'react';\nimport useLatest from 'use-latest';\n\nconst useBeforeunload = (handler) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof handler !== 'function' && handler != null) {\n      throw new TypeError(\n        `Expected \\`handler\\` to be of type \\`function\\`, but received type \\`${typeof handler}\\``\n      );\n    }\n  }\n\n  const handlerRef = useLatest(handler);\n\n  useEffect(() => {\n    const handleBeforeunload = (event) => {\n      let returnValue;\n      if (handlerRef.current != null) {\n        returnValue = handlerRef.current(event);\n      }\n\n      // Chrome requires `returnValue` to be set.\n      if (event.defaultPrevented) {\n        event.returnValue = '';\n      }\n\n      if (typeof returnValue === 'string') {\n        event.returnValue = returnValue;\n        return returnValue;\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeunload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeunload);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Beforeunload.propTypes = {\n    children: PropTypes.any,\n    onBeforeunload: PropTypes.func.isRequired,\n  };\n}\n\nexport default Beforeunload;\n"]},"metadata":{},"sourceType":"module"}