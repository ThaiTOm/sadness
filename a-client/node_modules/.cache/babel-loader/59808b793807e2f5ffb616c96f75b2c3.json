{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport classNames from \"classnames\";\nimport socketApp from '../../../socket';\nvar socket = socketApp.getSocket(); // This function is use for render list of contact\n\nfunction ContactContain({\n  onClick,\n  message,\n  users,\n  idRoom,\n  target\n}) {\n  _s();\n\n  // msg == new message send by real time, message == old message \n  const [read, setRead] = useState(false);\n  const [active, setActive] = useState(false);\n  const [value, setValue] = useState(\"\"); // lu last user, clu contain last user and message\n\n  const id = getCookie().token;\n  let lu; //this message is last message when not online\n\n  let sliceMess = (a, user) => {\n    if (a.length > 0) {\n      let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a.split(\",\")[0];\n      setValue(user + mess);\n    } else {\n      setValue(user + \"đã gửi hình ảnh\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"message\", msgs => {\n      let fnc = () => {\n        let value = msgs.data[0]; // [message, idSend, seen or not]\n\n        lu = value.id;\n        let a = msgs.data[0] ? decryptWithAES(value.message) : \"\";\n        if (lu === id) sliceMess(a, \"Bạn: \");else {\n          sliceMess(a, \"Đằng ấy: \"); // arr[2] contain true or false read\n\n          if (value.seen === \"false\") {\n            setRead(true);\n          }\n        }\n      };\n\n      msgs.type === \"message\" && msgs.idRoom === idRoom && fnc();\n    });\n  }, [message]);\n  useEffect(() => {\n    //message contain when another not sending and that is the last time when message send\n    let fnc = () => {\n      socket.emit(\"joinChatBack\", {\n        idRoom\n      });\n      let a = decryptWithAES(message.message);\n      if (message.id === id) sliceMess(a, \"Bạn: \");else {\n        sliceMess(a, \"Đăng ấy: \"); // arr[2] contain true or false read\n\n        if (message.seen === \"false\") {\n          setRead(true);\n        }\n      }\n    };\n\n    message && message.length > 0 && fnc();\n  }, [value]);\n  useEffect(() => {\n    if (target === idRoom) {\n      setActive(true);\n      setRead(false);\n      socket.emit(\"seenMessage\", {\n        id: idRoom,\n        users\n      });\n    } else {\n      setActive(false);\n    }\n  }, [target, value]); //if last people send is who then assign that\n\n  var classN = classNames({\n    \"contact_container\": true,\n    \"active_contact\": active,\n    \"not_read_contact\": read\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classN,\n    onClick: () => onClick(idRoom, users, id),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contact_contain_text\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"avatar\",\n        src: \"./demo.jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ContactContain, \"qVDiLFzEz4CdjFPoeuVnTMlWQ7s=\");\n\n_c = ContactContain;\nexport default ContactContain;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactContain\");","map":{"version":3,"sources":["/home/duythai/Developer/sadness/a-client/src/component/chatComponent/miniChatCom/contactContain.js"],"names":["React","useEffect","useState","decryptWithAES","getCookie","classNames","socketApp","socket","getSocket","ContactContain","onClick","message","users","idRoom","target","read","setRead","active","setActive","value","setValue","id","token","lu","sliceMess","a","user","length","mess","slice","split","on","msgs","fnc","data","seen","type","emit","classN"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { decryptWithAES, getCookie } from '../../../helpers/auth';\nimport classNames from \"classnames\";\nimport socketApp from '../../../socket';\nvar socket = socketApp.getSocket();\n\n// This function is use for render list of contact\n\nfunction ContactContain({ onClick, message, users, idRoom, target }) {\n    // msg == new message send by real time, message == old message \n    const [read, setRead] = useState(false);\n    const [active, setActive] = useState(false);\n    const [value, setValue] = useState(\"\");\n    // lu last user, clu contain last user and message\n    const id = getCookie().token;\n    let lu;\n    //this message is last message when not online\n    let sliceMess = (a, user) => {\n        if (a.length > 0) {\n            let mess = a.length > 10 ? a.slice(0, 10) + \".....\" : a.split(\",\")[0]\n            setValue(user + mess)\n        }\n        else {\n            setValue(user + \"đã gửi hình ảnh\")\n        }\n    }\n    useEffect(() => {\n        socket.on(\"message\", msgs => {\n            let fnc = () => {\n                let value = msgs.data[0]\n                // [message, idSend, seen or not]\n                lu = value.id\n                let a = msgs.data[0] ? decryptWithAES(value.message) : \"\"\n                if (lu === id) sliceMess(a, \"Bạn: \")\n                else {\n                    sliceMess(a, \"Đằng ấy: \")\n                    // arr[2] contain true or false read\n                    if (value.seen === \"false\") {\n                        setRead(true)\n                    }\n                }\n            }\n            msgs.type === \"message\" && msgs.idRoom === idRoom && fnc()\n        })\n    }, [message])\n\n    useEffect(() => {\n        //message contain when another not sending and that is the last time when message send\n        let fnc = () => {\n            socket.emit(\"joinChatBack\", { idRoom })\n            let a = decryptWithAES(message.message)\n            if (message.id === id) sliceMess(a, \"Bạn: \")\n            else {\n                sliceMess(a, \"Đăng ấy: \")\n                // arr[2] contain true or false read\n                if (message.seen === \"false\") {\n                    setRead(true)\n                }\n            }\n        }\n        message && message.length > 0 && fnc()\n    }, [value])\n\n    useEffect(() => {\n        if (target === idRoom) {\n            setActive(true)\n            setRead(false)\n            socket.emit(\"seenMessage\", { id: idRoom, users })\n        }\n        else {\n            setActive(false)\n        }\n    }, [target, value])\n    //if last people send is who then assign that\n    var classN = classNames({\n        \"contact_container\": true,\n        \"active_contact\": active,\n        \"not_read_contact\": read\n    })\n    return (\n        <div className={classN} onClick={() => onClick(idRoom, users, id)}>\n\n            <div className=\"contact_contain_text\">\n                <p>\n                    {value}\n                </p>\n                <img alt=\"avatar\" src=\"./demo.jpeg\"></img>\n            </div>\n        </div >\n    )\n}\n\nexport default ContactContain\n"]},"metadata":{},"sourceType":"module"}