{"ast":null,"code":"var _classCallCheck = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/duythai/Developer/sadness/a-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar Transport = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Transport, _Emitter);\n\n  var _super = _createSuper(Transport);\n\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  function Transport(opts) {\n    var _this;\n\n    _classCallCheck(this, Transport);\n\n    _this = _super.call(this);\n    _this.opts = opts;\n    _this.query = opts.query;\n    _this.readyState = \"\";\n    _this.socket = opts.socket;\n    return _this;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n\n\n  _createClass(Transport, [{\n    key: \"onError\",\n    value: function onError(msg, desc) {\n      var err = new Error(msg);\n      err.type = \"TransportError\";\n      err.description = desc;\n      this.emit(\"error\", err);\n      return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (\"closed\" === this.readyState || \"\" === this.readyState) {\n        this.readyState = \"opening\";\n        this.doOpen();\n      }\n\n      return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.doClose();\n        this.onClose();\n      }\n\n      return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api private\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(packets) {\n      if (\"open\" === this.readyState) {\n        this.write(packets);\n      } else {\n        throw new Error(\"Transport not open\");\n      }\n    }\n    /**\n     * Called upon open\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      this.writable = true;\n      this.emit(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var packet = parser.decodePacket(data, this.socket.binaryType);\n      this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      this.emit(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.readyState = \"closed\";\n      this.emit(\"close\");\n    }\n  }]);\n\n  return Transport;\n}(Emitter);\n\nmodule.exports = Transport;","map":{"version":3,"sources":["/home/duythai/Developer/sadness/a-client/node_modules/engine.io-client/lib/transport.js"],"names":["parser","require","Emitter","Transport","opts","query","readyState","socket","msg","desc","err","Error","type","description","emit","doOpen","doClose","onClose","packets","write","writable","data","packet","decodePacket","binaryType","onPacket","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;IAEME,S;;;;;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACE,qBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB;AAEA,UAAKA,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAaD,IAAI,CAACC,KAAlB;AACA,UAAKC,UAAL,GAAkB,EAAlB;AACA,UAAKC,MAAL,GAAcH,IAAI,CAACG,MAAnB;AANgB;AAOjB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;4BACUC,G,EAAKC,I,EAAM;AACjB,UAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAZ;AACAE,MAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACAF,MAAAA,GAAG,CAACG,WAAJ,GAAkBJ,IAAlB;AACA,WAAKK,IAAL,CAAU,OAAV,EAAmBJ,GAAnB;AACA,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;2BACS;AACL,UAAI,aAAa,KAAKJ,UAAlB,IAAgC,OAAO,KAAKA,UAAhD,EAA4D;AAC1D,aAAKA,UAAL,GAAkB,SAAlB;AACA,aAAKS,MAAL;AACD;;AAED,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;4BACU;AACN,UAAI,cAAc,KAAKT,UAAnB,IAAiC,WAAW,KAAKA,UAArD,EAAiE;AAC/D,aAAKU,OAAL;AACA,aAAKC,OAAL;AACD;;AAED,aAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;yBACOC,O,EAAS;AACZ,UAAI,WAAW,KAAKZ,UAApB,EAAgC;AAC9B,aAAKa,KAAL,CAAWD,OAAX;AACD,OAFD,MAEO;AACL,cAAM,IAAIP,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;6BACW;AACP,WAAKL,UAAL,GAAkB,MAAlB;AACA,WAAKc,QAAL,GAAgB,IAAhB;AACA,WAAKN,IAAL,CAAU,MAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;2BACSO,I,EAAM;AACX,UAAMC,MAAM,GAAGtB,MAAM,CAACuB,YAAP,CAAoBF,IAApB,EAA0B,KAAKd,MAAL,CAAYiB,UAAtC,CAAf;AACA,WAAKC,QAAL,CAAcH,MAAd;AACD;AAED;AACF;AACA;;;;6BACWA,M,EAAQ;AACf,WAAKR,IAAL,CAAU,QAAV,EAAoBQ,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;;8BACY;AACR,WAAKhB,UAAL,GAAkB,QAAlB;AACA,WAAKQ,IAAL,CAAU,OAAV;AACD;;;;EA9GqBZ,O;;AAiHxBwB,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["const parser = require(\"engine.io-parser\");\nconst Emitter = require(\"component-emitter\");\n\nclass Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n\n  /**\n   * Emits an error.\n   *\n   * @param {String} str\n   * @return {Transport} for chaining\n   * @api public\n   */\n  onError(msg, desc) {\n    const err = new Error(msg);\n    err.type = \"TransportError\";\n    err.description = desc;\n    this.emit(\"error\", err);\n    return this;\n  }\n\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n\n    return this;\n  }\n\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n\n    return this;\n  }\n\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api private\n   */\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      throw new Error(\"Transport not open\");\n    }\n  }\n\n  /**\n   * Called upon open\n   *\n   * @api private\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    this.emit(\"open\");\n  }\n\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api private\n   */\n  onData(data) {\n    const packet = parser.decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n\n  /**\n   * Called with a decoded packet.\n   */\n  onPacket(packet) {\n    this.emit(\"packet\", packet);\n  }\n\n  /**\n   * Called upon close.\n   *\n   * @api private\n   */\n  onClose() {\n    this.readyState = \"closed\";\n    this.emit(\"close\");\n  }\n}\n\nmodule.exports = Transport;\n"]},"metadata":{},"sourceType":"script"}